'use strict';
const stringifier_1 = require('./lib/stringifier');
function compileCollection(storage, options) {
    let root = [
        '<?xml version="1.0" encoding="UTF-8" standalone="no"?>',
        '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"'
    ].join('');
    if (options.inline) {
        root = '<svg';
        options.rootAttributes = Object.assign({
            width: 0,
            height: 0,
            position: 'absolute'
        }, options.rootAttributes);
    }
    Object.keys(options.rootAttributes).forEach((key) => {
        root += ` ${key}="${options.rootAttributes[key]}"`;
    });
    let buf = '';
    Object.keys(storage).forEach((key) => {
        buf += storage[key].replace(/^<symbol/, `<symbol id="${key}"`);
    });
    return root + '>' + buf + '</svg>';
}
function collection(options) {
    options = Object.assign({
        rootAttributes: {},
        inline: false,
        iconAttributes: {},
        iconPrefix: '',
        iconSuffix: ''
    }, options);
    options.clean = Object.assign({
        stripEmptyTags: true,
        stripTags: ['title', 'desc'],
        stripAttrs: [],
        stripExtraAttrs: true,
        stripStyles: false
    }, options.clean);
    let storage = {};
    return {
        add: (name, content, iconOptions) => {
            iconOptions = Object.assign(options, iconOptions);
            const id = iconOptions.iconPrefix + name + iconOptions.iconSuffix;
            storage[id] = stringifier_1.default(content, iconOptions);
        },
        get: (name) => {
            return storage[name];
        },
        remove: (name) => {
            delete storage[name];
        },
        clean: () => {
            storage = {};
        },
        compile: () => {
            return compileCollection(storage, options);
        }
    };
}
exports.collection = collection;
