'use strict';
const parser = require('svg-parser');
const clean_1 = require('./clean');
const filter_1 = require('./filter');
function makeAttributes(tree, iconAttrs, filters) {
    let attrs = '';
    const attrsCollection = Object.assign(tree.attributes, iconAttrs);
    Object.keys(attrsCollection).forEach((key) => {
        let value = tree.attributes[key];
        for (let i = 0; i < filters.attrs.length; i++) {
            const filter = filters.attrs[i];
            if (filter.strict && filter.pattern === key) {
                return;
            }
            if (!filter.strict && key.indexOf(filter.pattern) !== -1) {
                return;
            }
        }
        if (key === 'style') {
            value = clean_1.cleanupStyleProperties(value, filters.styleProperties);
        }
        value = value.toString().trim();
        if (value) {
            attrs += ` ${key}="${value}"`;
        }
    });
    return attrs;
}
function makeClosedTag(tree, options, filters) {
    const attrs = makeAttributes(tree, options.iconAttributes, filters);
    if (clean_1.skipTag(tree, attrs, filters)) {
        return '';
    }
    return `<${tree.name}${attrs}></${tree.name}>`;
}
function makeContent(content, parent, filters) {
    let start = '';
    let end = '';
    if (parent === 'style') {
        start = '<![CDATA[';
        end = ']]>';
        content = clean_1.cleanupStyleProperties(content, filters.styleProperties);
    }
    return start + content + end;
}
function stringify(tree, options, filters, parent, isNestedSvg) {
    let svg = '';
    if (tree.children && tree.children.length !== 0) {
        let name = tree.name;
        if (name === 'svg' && !isNestedSvg) {
            name = 'symbol';
            isNestedSvg = true;
        }
        const attrs = makeAttributes(tree, options.iconAttributes, filters);
        if (!clean_1.skipTag(tree, attrs, filters)) {
            svg += `<${name}${attrs}>`;
            for (let i = 0; i < tree.children.length; i++) {
                svg += stringify(tree.children[i], options, filters, name, isNestedSvg);
            }
            svg += `</${name}>`;
        }
    }
    else if (typeof tree === 'object') {
        svg += makeClosedTag(tree, options, filters);
    }
    else {
        svg += makeContent(tree, parent, filters);
    }
    return svg;
}
function stringifier(content, options) {
    const ast = parser.parse(content);
    const filters = filter_1.makeExcludeFilter(options);
    return stringify(ast, options, filters, null, false);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = stringifier;
