{"ast":null,"code":"var _jsxFileName = \"/Users/mindaugas/Desktop/frontend-party/src/components/ServerList/ServerList.tsx\";\nimport React, { Component } from \"react\";\nimport \"./ServerList.scss\";\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchServers } from \"../../actions/server.actions\";\n\nclass ServerList extends Component {\n  componentWillMount() {\n    this.props.fetchServers();\n  }\n\n  createList() {\n    const servers = this.props.servers;\n\n    if (servers && !Array.isArray(servers)) {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"No servers found\"));\n    }\n\n    return servers.sort((a, b) => {\n      return a.distance - b.distance || +a.name - +b.name;\n    }).map((server, i) => {\n      return React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, server.name), React.createElement(\"th\", {\n        className: \"text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, server.distance, \" km\"));\n    });\n  }\n\n  render() {\n    const isLoading = this.props.isLoading.isLoading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"aaa \", isLoading, React.createElement(\"table\", {\n      className: \"table server-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Server\"), React.createElement(\"th\", {\n      scope: \"col\",\n      className: \"text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Distance\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.createList())), isLoading ? React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Loading...\"))) : null);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  servers: state.servers.items,\n  isLoading: state.servers.isLoading\n});\n\nexport default connect(mapStateToProps, {\n  fetchServers\n})(withRouter(ServerList));","map":{"version":3,"sources":["/Users/mindaugas/Desktop/frontend-party/src/components/ServerList/ServerList.tsx"],"names":["React","Component","withRouter","connect","fetchServers","ServerList","componentWillMount","props","createList","servers","Array","isArray","sort","a","b","distance","name","map","server","i","render","isLoading","mapStateToProps","state","items"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,mBAAP;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,8BAA3B;;AAOA,MAAMC,UAAN,SAAyBJ,SAAzB,CAA6C;AACzCK,EAAAA,kBAAkB,GAAS;AACvB,SAAKC,KAAL,CAAWH,YAAX;AACH;;AAEDI,EAAAA,UAAU,GAAG;AACT,UAAMC,OAA0B,GAAG,KAAKF,KAAL,CAAWE,OAA9C;;AAEA,QAAIA,OAAO,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAhB,EAAwC;AACpC,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADI,CAAR;AAGH;;AACD,WAAOA,OAAO,CAACG,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1B,aAAOD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAf,IAA2B,CAACF,CAAC,CAACG,IAAH,GAAU,CAACF,CAAC,CAACE,IAA/C;AACH,KAFM,EAEJC,GAFI,CAEA,CAACC,MAAD,EAASC,CAAT,KAAe;AAClB,aACI;AAAI,QAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiBD,MAAM,CAACF,IAAxB,CADJ,EAEI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BE,MAAM,CAACH,QAAnC,QAFJ,CADJ;AAMH,KATM,CAAP;AAUH;;AAEDK,EAAAA,MAAM,GAAG;AAAA,UACEC,SADF,GACe,KAAKd,KAAL,CAAWc,SAD1B,CACEA,SADF;AAEL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACQA,SADR,EAEI;AAAO,MAAA,SAAS,EAAC,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAgB,MAAA,SAAS,EAAC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CADA,CADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,KAAKb,UAAL,EAFD,CAPJ,CAFJ,EAcKa,SAAS,GACN;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,IAAI,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,CADM,GAMJ,IApBV,CADJ;AAyBH;;AApDwC;;AAuD7C,MAAMC,eAAe,GAAIC,KAAD,KAAiB;AACrCd,EAAAA,OAAO,EAAEc,KAAK,CAACd,OAAN,CAAce,KADc;AAErCH,EAAAA,SAAS,EAAEE,KAAK,CAACd,OAAN,CAAcY;AAFY,CAAjB,CAAxB;;AAKA,eAAelB,OAAO,CAACmB,eAAD,EAAkB;AAAClB,EAAAA;AAAD,CAAlB,CAAP,CAAyCF,UAAU,CAACG,UAAD,CAAnD,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport \"./ServerList.scss\";\nimport {withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {fetchServers} from \"../../actions/server.actions\";\n\nexport interface ServerInterface {\n    name: string;\n    distance: number;\n}\n\nclass ServerList extends Component<any, any> {\n    componentWillMount(): void {\n        this.props.fetchServers();\n    }\n\n    createList() {\n        const servers: ServerInterface[] = this.props.servers;\n\n        if (servers && !Array.isArray(servers)) {\n            return (<tr>\n                <td>No servers found</td>\n            </tr>)\n        }\n        return servers.sort((a, b) => {\n            return a.distance - b.distance || +a.name - +b.name;\n        }).map((server, i) => {\n            return (\n                <tr key={i}>\n                    <th scope=\"row\">{server.name}</th>\n                    <th className=\"text-right\">{server.distance} km</th>\n                </tr>\n            )\n        });\n    }\n\n    render() {\n        const {isLoading} = this.props.isLoading;\n        return (\n            <div>\n               aaa {isLoading}\n                <table className=\"table server-list\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">Server</th>\n                        <th scope=\"col\" className=\"text-right\">Distance</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n\n                    {this.createList()}\n                    </tbody>\n                </table>\n                {isLoading ?\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    servers: state.servers.items,\n    isLoading: state.servers.isLoading\n});\n\nexport default connect(mapStateToProps, {fetchServers})(withRouter(ServerList));\n\n"]},"metadata":{},"sourceType":"module"}