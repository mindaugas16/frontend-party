{"ast":null,"code":"var _jsxFileName = \"/Users/mindaugas/Desktop/frontend-party/src/components/LoginForm/LoginForm.tsx\";\nimport InputField from \"../InputField/InputField\";\nimport Icon from \"../Icon/Icon\";\nimport Button from \"../Button/Button\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { userService } from \"../../services/auth.service\";\n\nclass LoginForm extends Component {\n  //@TODO: Remove username and password init values\n  constructor(props) {\n    super(props);\n    this.state = {\n      submitted: false,\n      invalid: false,\n      isLoading: false,\n      username: 'tesonet',\n      password: 'partyanimal'\n    };\n\n    this.login = async (username, password) => {\n      this.setState({\n        submitted: true,\n        isLoading: true\n      });\n      userService.login(username, password).then(success => {\n        if (success) {\n          this.props.history.push('/');\n        } else {\n          this.setState({\n            invalid: true,\n            isLoading: false\n          });\n        }\n      });\n    };\n\n    this.submitFormHandler = async event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            username = _this$state.username,\n            password = _this$state.password;\n      this.setState({\n        submitted: true\n      });\n\n      if (username && password) {\n        this.login(username, password);\n      }\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    if (this.state.submitted) {\n      this.setState({\n        submitted: false\n      });\n    }\n\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // @ts-ignore\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          submitted = _this$state2.submitted,\n          username = _this$state2.username,\n          password = _this$state2.password,\n          invalid = _this$state2.invalid;\n    return React.createElement(\"form\", {\n      className: \"form\",\n      onSubmit: this.submitFormHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, submitted && invalid ? React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Username or password is incorrect\") : null, React.createElement(InputField, {\n      type: 'text',\n      name: 'username',\n      placeholder: 'Username',\n      error: submitted && !username ? 'Username is required' : null,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: 'username',\n      color: '#CCC',\n      width: 14,\n      height: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(InputField, {\n      type: 'password',\n      name: 'password',\n      placeholder: 'Password',\n      extraClasses: 'danger',\n      error: submitted && !password ? 'Password is required' : null,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: 'password',\n      color: '#CCC',\n      width: 14,\n      height: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Button, {\n      title: 'Log in',\n      extraClasses: \"w-100\",\n      buttonStyle: \"success\",\n      type: \"submit\",\n      isLoading: this.state.isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(LoginForm);","map":{"version":3,"sources":["/Users/mindaugas/Desktop/frontend-party/src/components/LoginForm/LoginForm.tsx"],"names":["InputField","Icon","Button","React","Component","withRouter","userService","LoginForm","constructor","props","state","submitted","invalid","isLoading","username","password","login","setState","then","success","history","push","submitFormHandler","event","preventDefault","handleChange","bind","target","name","value","render"],"mappings":"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","sourcesContent":["import InputField from \"../InputField/InputField\";\nimport Icon from \"../Icon/Icon\";\nimport Button from \"../Button/Button\";\nimport React, {Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport {userService} from \"../../services/auth.service\";\n\ninterface StateInterface {\n    username?: string;\n    password?: string;\n    invalid: boolean;\n    submitted: boolean;\n    isLoading: boolean;\n}\n\nclass LoginForm extends Component<any, StateInterface> {\n    //@TODO: Remove username and password init values\n    state: StateInterface = {\n        submitted: false,\n        invalid: false,\n        isLoading: false,\n\n        username: 'tesonet',\n        password: 'partyanimal'\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    login = async (username: string, password: string) => {\n        this.setState({\n            submitted: true,\n            isLoading: true\n        });\n\n        userService.login(username, password).then((success: boolean) => {\n            if (success) {\n                this.props.history.push('/');\n            } else {\n                this.setState({\n                    invalid: true,\n                    isLoading: false\n                })\n            }\n        });\n    };\n\n    submitFormHandler = async (event: any) => {\n        event.preventDefault();\n        const {username, password} = this.state;\n\n        this.setState({\n            submitted: true\n        });\n\n        if (username && password) {\n            this.login(username, password);\n        }\n    };\n\n    handleChange(event: any) {\n        if (this.state.submitted) {\n            this.setState({\n                submitted: false\n            })\n        }\n        const {name, value} = event.target;\n        // @ts-ignore\n        this.setState({[name]: value});\n    }\n\n    render() {\n        const {submitted, username, password, invalid} = this.state;\n        return (\n            <form className=\"form\" onSubmit={this.submitFormHandler}>\n                {submitted && invalid ?\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        Username or password is incorrect\n                    </div>\n                    : null\n                }\n                <InputField type={'text'}\n                            name={'username'}\n                            placeholder={'Username'}\n                            error={submitted && !username ? 'Username is required' : null}\n                            onChange={this.handleChange}\n                >\n                    <Icon name={'username'} color={'#CCC'} width={14} height={16}/>\n                </InputField>\n\n                <InputField type={'password'}\n                            name={'password'}\n                            placeholder={'Password'}\n                            extraClasses={'danger'}\n                            error={submitted && !password ? 'Password is required' : null}\n                            onChange={this.handleChange}\n                >\n                    <Icon name={'password'} color={'#CCC'} width={14} height={16}/>\n                </InputField>\n\n                <Button title={'Log in'}\n                        extraClasses=\"w-100\"\n                        buttonStyle=\"success\"\n                        type=\"submit\"\n                        isLoading={this.state.isLoading}\n                />\n            </form>\n        )\n    }\n}\n\nexport default withRouter(LoginForm);"]},"metadata":{},"sourceType":"module"}