{"ast":null,"code":"var _jsxFileName = \"/Users/mindaugas/Desktop/frontend-party/src/components/LoginForm/LoginForm.tsx\";\nimport InputField from \"../InputField/InputField\";\nimport Icon from \"../Icon/Icon\";\nimport Button from \"../Button/Button\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { localStorageKey } from \"../../constants/auth.constants\";\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      submitted: false\n    };\n\n    this.login = async body => {\n      this.setState({\n        submitted: true\n      });\n      const response = await fetch('http://playground.tesonet.lt/v1/tokens', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      const data = await response.json();\n\n      if (data) {\n        // Successful login\n        if (data.token) {\n          console.log(data.token);\n          localStorage.setItem(localStorageKey, data.token); // this.props.history.push('/');\n        } else if (data.message) {\n          console.log(data.message);\n        }\n      }\n    };\n\n    this.submitFormHandler = async event => {\n      event.preventDefault();\n      const target = event.target;\n      const username = target.username.value;\n      const password = target.password.value;\n\n      if (username && password) {\n        this.login({\n          username,\n          password\n        });\n      }\n    };\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // @ts-ignore\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          submitted = _this$state.submitted,\n          username = _this$state.username,\n          password = _this$state.password;\n    return React.createElement(\"form\", {\n      className: \"form\",\n      onSubmit: this.submitFormHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      type: 'text',\n      name: 'username',\n      placeholder: 'Username',\n      error: submitted && !username ? 'Username is required' : null,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: 'username',\n      color: '#CCC',\n      width: 14,\n      height: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(InputField, {\n      type: 'password',\n      name: 'password',\n      placeholder: 'Password',\n      extraClasses: 'danger',\n      error: submitted && !password ? 'Password is required' : null,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: 'password',\n      color: '#CCC',\n      width: 14,\n      height: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(Button, {\n      title: 'Log in',\n      extraClasses: \"w-100\",\n      buttonStyle: \"success\",\n      type: \"submit\",\n      isLoading: this.state.submitted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(LoginForm);","map":{"version":3,"sources":["/Users/mindaugas/Desktop/frontend-party/src/components/LoginForm/LoginForm.tsx"],"names":["InputField","Icon","Button","React","Component","withRouter","localStorageKey","LoginForm","constructor","props","state","submitted","login","body","setState","response","fetch","method","headers","JSON","stringify","data","json","token","console","log","localStorage","setItem","message","submitFormHandler","event","preventDefault","target","username","value","password","handleChange","name","render"],"mappings":"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","sourcesContent":["import InputField from \"../InputField/InputField\";\nimport Icon from \"../Icon/Icon\";\nimport Button from \"../Button/Button\";\nimport React, {Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport {localStorageKey} from \"../../constants/auth.constants\";\n\ninterface StateInterface {\n    username?: string;\n    password?: string;\n    submitted: boolean;\n}\n\nclass LoginForm extends Component<any, StateInterface> {\n    state: StateInterface = {\n        submitted: false\n    };\n\n    constructor(props) {\n        super(props);\n        \n    }\n\n    login = async (body: { username: string, password: string }) => {\n        this.setState({\n            submitted: true\n        });\n\n        const response = await fetch('http://playground.tesonet.lt/v1/tokens', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body)\n        });\n\n        const data = await response.json();\n\n        if (data) {\n            // Successful login\n            if (data.token) {\n                console.log(data.token);\n                localStorage.setItem(localStorageKey, data.token);\n                // this.props.history.push('/');\n            } else if (data.message) {\n                console.log(data.message);\n            }\n        }\n    };\n\n    submitFormHandler = async (event: any) => {\n        event.preventDefault();\n        const {target} = event;\n        const username = target.username.value;\n        const password = target.password.value;\n\n        if (username && password) {\n            this.login({username, password});\n        }\n    };\n\n    handleChange(event: any) {\n        const {name, value} = event.target;\n        // @ts-ignore\n        this.setState({[name]: value});\n    }\n\n    render() {\n        const {submitted, username, password} = this.state;\n        return (\n            <form className=\"form\" onSubmit={this.submitFormHandler}>\n                <InputField type={'text'}\n                            name={'username'}\n                            placeholder={'Username'}\n                            error={submitted && !username ? 'Username is required' : null}\n                            onChange={this.handleChange}\n                >\n                    <Icon name={'username'} color={'#CCC'} width={14} height={16}/>\n                </InputField>\n\n                <InputField type={'password'}\n                            name={'password'}\n                            placeholder={'Password'}\n                            extraClasses={'danger'}\n                            error={submitted && !password ? 'Password is required' : null}\n                            onChange={this.handleChange}\n                >\n                    <Icon name={'password'} color={'#CCC'} width={14} height={16}/>\n                </InputField>\n\n                <Button title={'Log in'}\n                        extraClasses=\"w-100\"\n                        buttonStyle=\"success\"\n                        type=\"submit\"\n                        isLoading={this.state.submitted}\n                />\n            </form>\n        )\n    }\n}\n\nexport default withRouter(LoginForm);"]},"metadata":{},"sourceType":"module"}