{"ast":null,"code":"var _jsxFileName = \"/Users/mindaugas/Desktop/frontend-party/src/ServerList/ServerList.tsx\";\nimport React, { Component } from \"react\";\nimport \"./ServerList.scss\";\nimport { withRouter } from 'react-router-dom';\nimport { localStorageKey } from \"../constants/auth.constants\";\n\nclass ServerList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      isLoading: true\n    };\n  }\n\n  async componentDidMount() {\n    const token = await localStorage.getItem(localStorageKey);\n\n    if (!token) {\n      console.log('Please login');\n      this.props.history.push('/sign-in');\n      return;\n    }\n\n    const response = await fetch('http://playground.tesonet.lt/v1/servers', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer '\n      }\n    });\n    this.setState({\n      data: await response.json(),\n      isLoading: false\n    });\n  }\n\n  createList() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          data = _this$state.data;\n\n    if (isLoading && !data) {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"No servers found\");\n    } // return data.sort((a, b) => {\n    //     return a.distance - b.distance || +a.name - +b.name;\n    // }).map((server, i) => {\n    //     return (\n    //         <tr key={i}>\n    //             <th scope=\"row\">{server.name}</th>\n    //             <th className=\"text-right\">{server.distance} km</th>\n    //         </tr>\n    //     )\n    // });\n\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table server-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Server\"), React.createElement(\"th\", {\n      scope: \"col\",\n      className: \"text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Distance\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.createList())), React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Loading...\"))));\n  }\n\n}\n\nexport default withRouter(ServerList);","map":{"version":3,"sources":["/Users/mindaugas/Desktop/frontend-party/src/ServerList/ServerList.tsx"],"names":["React","Component","withRouter","localStorageKey","ServerList","state","data","isLoading","componentDidMount","token","localStorage","getItem","console","log","props","history","push","response","fetch","method","headers","setState","json","createList","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,mBAAP;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,eAAR,QAA8B,6BAA9B;;AAaA,MAAMC,UAAN,SAAyBH,SAAzB,CAAwD;AAAA;AAAA;AAAA,SACpDI,KADoD,GAC5B;AACpBC,MAAAA,IAAI,EAAE,EADc;AAEpBC,MAAAA,SAAS,EAAE;AAFS,KAD4B;AAAA;;AAMpD,QAAMC,iBAAN,GAA0B;AACtB,UAAMC,KAAK,GAAG,MAAMC,YAAY,CAACC,OAAb,CAAqBR,eAArB,CAApB;;AACA,QAAI,CAACM,KAAL,EAAY;AACRG,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,UAAxB;AACA;AACH;;AACD,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAD,EAA4C;AACpEC,MAAAA,MAAM,EAAE,KAD4D;AAEpEC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB,kBAFX;AAGL,yBAAiB;AAHZ;AAF2D,KAA5C,CAA5B;AASA,SAAKC,QAAL,CAAc;AACVf,MAAAA,IAAI,EAAE,MAAMW,QAAQ,CAACK,IAAT,EADF;AAEVf,MAAAA,SAAS,EAAE;AAFD,KAAd;AAIH;;AAEDgB,EAAAA,UAAU,GAAG;AAAA,wBACiB,KAAKlB,KADtB;AAAA,UACFE,SADE,eACFA,SADE;AAAA,UACSD,IADT,eACSA,IADT;;AAET,QAAGC,SAAS,IAAI,CAACD,IAAjB,EAAuB;AACnB,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAR;AAGH,KANQ,CAOT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;;AAEDkB,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAgB,MAAA,SAAS,EAAC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CADA,CADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKD,UAAL,EADD,CAPJ,CADJ,EAYI;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,IAAI,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAFJ,CAZJ,CADJ;AAqBH;;AArEmD;;AAwExD,eAAerB,UAAU,CAACE,UAAD,CAAzB","sourcesContent":["import React, {Component} from \"react\";\nimport \"./ServerList.scss\";\nimport {withRouter} from 'react-router-dom';\nimport {localStorageKey} from \"../constants/auth.constants\";\n\ninterface StateInterface {\n    data: ServerInterface[];\n    history?: History[];\n    isLoading: boolean;\n}\n\nexport interface ServerInterface {\n    name: string;\n    distance: number;\n}\n\nclass ServerList extends Component<any, StateInterface> {\n    state: StateInterface = {\n        data: [],\n        isLoading: true\n    };\n\n    async componentDidMount() {\n        const token = await localStorage.getItem(localStorageKey);\n        if (!token) {\n            console.log('Please login');\n            this.props.history.push('/sign-in');\n            return;\n        }\n        const response = await fetch('http://playground.tesonet.lt/v1/servers', {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ',\n            }\n        });\n\n        this.setState({\n            data: await response.json(),\n            isLoading: false\n        });\n    }\n\n    createList() {\n        const {isLoading, data} = this.state;\n        if(isLoading && !data) {\n            return (<tr>\n                No servers found\n            </tr>)\n        }\n        // return data.sort((a, b) => {\n        //     return a.distance - b.distance || +a.name - +b.name;\n        // }).map((server, i) => {\n        //     return (\n        //         <tr key={i}>\n        //             <th scope=\"row\">{server.name}</th>\n        //             <th className=\"text-right\">{server.distance} km</th>\n        //         </tr>\n        //     )\n        // });\n    }\n\n    render() {\n        return (\n            <div>\n                <table className=\"table server-list\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">Server</th>\n                        <th scope=\"col\" className=\"text-right\">Distance</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.createList()}\n                    </tbody>\n                </table>\n                <div className=\"d-flex justify-content-center\">\n\n                    <div className=\"spinner-border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(ServerList);\n\n"]},"metadata":{},"sourceType":"module"}