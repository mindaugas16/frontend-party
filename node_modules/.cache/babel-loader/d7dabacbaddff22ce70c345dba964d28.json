{"ast":null,"code":"import { FETCH_SERVERS } from \"./index\";\nimport { localStorageKey } from \"../constants/auth.constants\";\nexport const fetchServers = () => dispatch => {\n  const token = localStorage.getItem(localStorageKey);\n  setTimeout(() => {\n    fetch('http://playground.tesonet.lt/v1/servers', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \".concat(token)\n      }\n    }).then(res => res.json()).then(servers => dispatch({\n      type: FETCH_SERVERS,\n      payload: servers,\n      isLoading: false\n    }));\n  }, 4000);\n};","map":{"version":3,"sources":["/Users/mindaugas/Desktop/frontend-party/src/actions/server.actions.ts"],"names":["FETCH_SERVERS","localStorageKey","fetchServers","dispatch","token","localStorage","getItem","setTimeout","fetch","method","headers","then","res","json","servers","type","payload","isLoading"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,SAA5B;AACA,SAAQC,eAAR,QAA8B,6BAA9B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAD,IAAmB;AACjD,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBL,eAArB,CAAd;AAEAM,EAAAA,UAAU,CAAC,MAAM;AACjBC,IAAAA,KAAK,CAAC,yCAAD,EAA4C;AAC7CC,MAAAA,MAAM,EAAE,KADqC;AAE7CC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB,kBAFX;AAGL,0CAA2BN,KAA3B;AAHK;AAFoC,KAA5C,CAAL,CAOGO,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EAQKF,IARL,CAQUG,OAAO,IAAIX,QAAQ,CAAC;AACtBY,MAAAA,IAAI,EAAEf,aADgB;AAEtBgB,MAAAA,OAAO,EAAEF,OAFa;AAGtBG,MAAAA,SAAS,EAAE;AAHW,KAAD,CAR7B;AAaC,GAdS,EAcP,IAdO,CAAV;AAeH,CAlBM","sourcesContent":["import {FETCH_SERVERS} from \"./index\";\nimport {localStorageKey} from \"../constants/auth.constants\";\n\nexport const fetchServers = () => (dispatch: any) => {\n    const token = localStorage.getItem(localStorageKey);\n\n    setTimeout(() => {\n    fetch('http://playground.tesonet.lt/v1/servers', {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n        }\n    }).then(res => res.json())\n        .then(servers => dispatch({\n            type: FETCH_SERVERS,\n            payload: servers,\n            isLoading: false\n        }));\n    }, 4000);\n};\n"]},"metadata":{},"sourceType":"module"}