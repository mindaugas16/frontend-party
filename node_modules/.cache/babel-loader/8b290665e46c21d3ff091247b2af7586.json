{"ast":null,"code":"var _jsxFileName = \"/Users/mindaugas/Desktop/frontend-party/src/components/ServerList/ServerList.tsx\";\nimport React, { Component } from \"react\";\nimport \"./ServerList.scss\";\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchServers } from \"../../actions/server.actions\";\n\nclass ServerList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      isLoading: true\n    };\n  }\n\n  componentWillMount() {\n    this.props.fetchServers();\n    console.log(this.props.servers);\n  } // componentDidMount() {\n  //     const token = localStorage.getItem(localStorageKey);\n  //     if (!token) {\n  //         console.log('Please login');\n  //         this.props.history.push('/sign-in');\n  //         return;\n  //     }\n  //     fetch('http://playground.tesonet.lt/v1/servers', {\n  //         method: 'GET',\n  //         headers: {\n  //             'Accept': 'application/json',\n  //             'Content-Type': 'application/json',\n  //             'Authorization': `Bearer ${token}`,\n  //         }\n  //     }).then(res => res.json())\n  //         .then(data => {\n  //             this.setState({\n  //                 data,\n  //                 isLoading: false\n  //             });\n  //         });\n  // }\n\n\n  createList() {// const {isLoading, data} = this.state;\n    //\n    // if (isLoading) {\n    //     return;\n    // }\n    //\n    // if (data && !Array.isArray(data)) {\n    //     return (<tr>\n    //         <td>No servers found</td>\n    //     </tr>)\n    // }\n    // return data.sort((a, b) => {\n    //     return a.distance - b.distance || +a.name - +b.name;\n    // }).map((server, i) => {\n    //     return (\n    //         <tr key={i}>\n    //             <th scope=\"row\">{server.name}</th>\n    //             <th className=\"text-right\">{server.distance} km</th>\n    //         </tr>\n    //     )\n    // });\n  }\n\n  render() {\n    const isLoading = this.state.isLoading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table server-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Server\"), React.createElement(\"th\", {\n      scope: \"col\",\n      className: \"text-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Distance\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.createList())), isLoading ? React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Loading...\"))) : null);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  servers: state.servers.items\n});\n\nexport default connect(mapStateToProps, {\n  fetchServers\n})(withRouter(ServerList));","map":{"version":3,"sources":["/Users/mindaugas/Desktop/frontend-party/src/components/ServerList/ServerList.tsx"],"names":["React","Component","withRouter","connect","fetchServers","ServerList","state","data","isLoading","componentWillMount","props","console","log","servers","createList","render","mapStateToProps","items"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,mBAAP;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AAEA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,8BAA3B;;AAaA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAwD;AAAA;AAAA;AAAA,SACpDK,KADoD,GAC5B;AACpBC,MAAAA,IAAI,EAAE,EADc;AAEpBC,MAAAA,SAAS,EAAE;AAFS,KAD4B;AAAA;;AAMpDC,EAAAA,kBAAkB,GAAS;AACvB,SAAKC,KAAL,CAAWN,YAAX;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWG,OAAvB;AACH,GAVmD,CAYpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,UAAU,GAAG,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAAA,UACEP,SADF,GACe,KAAKF,KADpB,CACEE,SADF;AAEL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAgB,MAAA,SAAS,EAAC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CADA,CADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,KAAKM,UAAL,EAFD,CAPJ,CADJ,EAaKN,SAAS,GACN;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,IAAI,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,CADM,GAMJ,IAnBV,CADJ;AAwBH;;AArFmD;;AAwFxD,MAAMQ,eAAe,GAAIV,KAAD,KAAiB;AACrCO,EAAAA,OAAO,EAAEP,KAAK,CAACO,OAAN,CAAcI;AADc,CAAjB,CAAxB;;AAIA,eAAed,OAAO,CAACa,eAAD,EAAkB;AAACZ,EAAAA;AAAD,CAAlB,CAAP,CAAyCF,UAAU,CAACG,UAAD,CAAnD,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport \"./ServerList.scss\";\nimport {withRouter} from 'react-router-dom';\nimport {localStorageKey} from \"../../constants/auth.constants\";\nimport {connect} from 'react-redux';\nimport {fetchServers} from \"../../actions/server.actions\";\n\ninterface StateInterface {\n    data: ServerInterface[];\n    history?: History[];\n    isLoading: boolean;\n}\n\nexport interface ServerInterface {\n    name: string;\n    distance: number;\n}\n\nclass ServerList extends Component<any, StateInterface> {\n    state: StateInterface = {\n        data: [],\n        isLoading: true\n    };\n\n    componentWillMount(): void {\n        this.props.fetchServers();\n\n        console.log(this.props.servers);\n    }\n\n    // componentDidMount() {\n    //     const token = localStorage.getItem(localStorageKey);\n    //     if (!token) {\n    //         console.log('Please login');\n    //         this.props.history.push('/sign-in');\n    //         return;\n    //     }\n    //     fetch('http://playground.tesonet.lt/v1/servers', {\n    //         method: 'GET',\n    //         headers: {\n    //             'Accept': 'application/json',\n    //             'Content-Type': 'application/json',\n    //             'Authorization': `Bearer ${token}`,\n    //         }\n    //     }).then(res => res.json())\n    //         .then(data => {\n    //             this.setState({\n    //                 data,\n    //                 isLoading: false\n    //             });\n    //         });\n    // }\n\n    createList() {\n        // const {isLoading, data} = this.state;\n        //\n        // if (isLoading) {\n        //     return;\n        // }\n        //\n        // if (data && !Array.isArray(data)) {\n        //     return (<tr>\n        //         <td>No servers found</td>\n        //     </tr>)\n        // }\n        // return data.sort((a, b) => {\n        //     return a.distance - b.distance || +a.name - +b.name;\n        // }).map((server, i) => {\n        //     return (\n        //         <tr key={i}>\n        //             <th scope=\"row\">{server.name}</th>\n        //             <th className=\"text-right\">{server.distance} km</th>\n        //         </tr>\n        //     )\n        // });\n    }\n\n    render() {\n        const {isLoading} = this.state;\n        return (\n            <div>\n                <table className=\"table server-list\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">Server</th>\n                        <th scope=\"col\" className=\"text-right\">Distance</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n\n                    {this.createList()}\n                    </tbody>\n                </table>\n                {isLoading ?\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    servers: state.servers.items\n});\n\nexport default connect(mapStateToProps, {fetchServers})(withRouter(ServerList));\n\n"]},"metadata":{},"sourceType":"module"}