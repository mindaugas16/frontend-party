{"ast":null,"code":"var _jsxFileName = \"/Users/mindaugas/Desktop/frontend-party/src/_components/LoginForm/LoginForm.tsx\";\nimport InputField from \"../InputField/InputField\";\nimport Icon from \"../Icon/Icon\";\nimport Button from \"../Button/Button\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { localStorageKey } from \"../../_constants/auth.constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nclass LoginForm extends Component {\n  //@TODO: Remove username and password init values\n  constructor() {\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    if (this.state.submitted) {\n      this.setState({\n        submitted: false\n      });\n    }\n\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // @ts-ignore\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          submitted = _this$state.submitted,\n          username = _this$state.username,\n          password = _this$state.password,\n          invalid = _this$state.invalid;\n    return React.createElement(\"form\", {\n      className: \"form\",\n      onSubmit: this.submitFormHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, submitted && invalid ? React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Username or password is incorrect\") : null, React.createElement(InputField, {\n      type: 'text',\n      name: 'username',\n      placeholder: 'Username',\n      error: submitted && !username ? 'Username is required' : null,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: 'username',\n      color: '#CCC',\n      width: 14,\n      height: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(InputField, {\n      type: 'password',\n      name: 'password',\n      placeholder: 'Password',\n      extraClasses: 'danger',\n      error: submitted && !password ? 'Password is required' : null,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: 'password',\n      color: '#CCC',\n      width: 14,\n      height: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(Button, {\n      title: 'Log in',\n      extraClasses: \"w-100\",\n      buttonStyle: \"success\",\n      type: \"submit\",\n      isLoading: this.state.isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), this.isAuth);\n  }\n\n}\n\nexport default withRouter(LoginForm);","map":{"version":3,"sources":["/Users/mindaugas/Desktop/frontend-party/src/_components/LoginForm/LoginForm.tsx"],"names":["InputField","Icon","Button","React","Component","withRouter","localStorageKey","useDispatch","useSelector","LoginForm","constructor","handleChange","bind","event","state","submitted","setState","target","name","value","render","username","password","invalid","submitFormHandler","isLoading","isAuth"],"mappings":"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","sourcesContent":["import InputField from \"../InputField/InputField\";\nimport Icon from \"../Icon/Icon\";\nimport Button from \"../Button/Button\";\nimport React, {Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport {localStorageKey} from \"../../_constants/auth.constants\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginAction} from \"../../_actions\";\n\ninterface StateInterface {\n    username?: string;\n    password?: string;\n    invalid: boolean;\n    submitted: boolean;\n    isLoading: boolean;\n}\n\nclass LoginForm extends Component<any, StateInterface> {\n    //@TODO: Remove username and password init values\n    state: StateInterface = {\n        submitted: false,\n        invalid: false,\n        isLoading: false,\n\n        username: 'tesonet',\n        password: 'partyanimal'\n    };\n    isAuth = useSelector(state => state);\n    dispatch = useDispatch();\n\n    constructor() {\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    login = async (body: { username: string, password: string }) => {\n        this.setState({\n            submitted: true,\n            isLoading: true\n        });\n\n        const response = await fetch('http://playground.tesonet.lt/v1/tokens', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body)\n        });\n\n        const data = await response.json();\n\n        if (data) {\n            // Successful login\n            if (data.token) {\n                console.log(data.token);\n                localStorage.setItem(localStorageKey, data.token);\n                this.props.history.push('/');\n            } else if (data.message) {\n                console.log(data.message);\n                this.setState({\n                    invalid: true,\n                    isLoading: false\n                })\n            }\n        }\n    };\n\n    submitFormHandler = async (event: any) => {\n        event.preventDefault();\n        const {username, password} = this.state;\n\n        this.setState({\n            submitted: true\n        });\n\n        if (username && password) {\n            this.login({username, password});\n        }\n    };\n\n    handleChange(event: any) {\n        if (this.state.submitted) {\n            this.setState({\n                submitted: false\n            })\n        }\n        const {name, value} = event.target;\n        // @ts-ignore\n        this.setState({[name]: value});\n    }\n\n    render() {\n        const {submitted, username, password, invalid} = this.state;\n        return (\n            <form className=\"form\" onSubmit={this.submitFormHandler}>\n                {submitted && invalid ?\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        Username or password is incorrect\n                    </div>\n                    : null\n                }\n                <InputField type={'text'}\n                            name={'username'}\n                            placeholder={'Username'}\n                            error={submitted && !username ? 'Username is required' : null}\n                            onChange={this.handleChange}\n                >\n                    <Icon name={'username'} color={'#CCC'} width={14} height={16}/>\n                </InputField>\n\n                <InputField type={'password'}\n                            name={'password'}\n                            placeholder={'Password'}\n                            extraClasses={'danger'}\n                            error={submitted && !password ? 'Password is required' : null}\n                            onChange={this.handleChange}\n                >\n                    <Icon name={'password'} color={'#CCC'} width={14} height={16}/>\n                </InputField>\n\n                <Button title={'Log in'}\n                        extraClasses=\"w-100\"\n                        buttonStyle=\"success\"\n                        type=\"submit\"\n                        isLoading={this.state.isLoading}\n                />\n                {this.isAuth}\n            </form>\n        )\n    }\n}\n\nexport default withRouter(LoginForm);"]},"metadata":{},"sourceType":"module"}